#BlueJ class context
comment0.target=Graph
comment0.text=\r\n\ A\ graph\ class\ with\ some\ common\ graph\ algorithm\r\n\ \r\n\ @author\ Angie\ Medina\ -\ Jose\ Perez\r\n\ @version\ 4/10/2020\r\n
comment1.params=graph
comment1.target=Graph(java.util.HashMap)
comment1.text=\r\n\ Constructor\ for\ objects\ of\ class\ Graph\r\n
comment2.params=input
comment2.target=java.util.HashMap\ graphMaker(java.lang.String[])
comment3.params=vertex\ edges\ components\ size
comment3.target=java.lang.String[]\ mst(java.util.ArrayList,\ double[][],\ java.util.ArrayList,\ int)
comment3.text=\r\n\ Makes\ a\ minimum\ Spanning\ Tree\ with\ the\ current\ information\ in\ the\ simulator,\ \r\n\ then\ makes\ slightly\ transparent\ those\ streets\ and\ signs\ that\ don't\ belong\ to\ the\ M.S.T\r\n
comment4.params=ini\ size\ vertex\ edges
comment4.target=java.util.ArrayList\ bfs(int,\ int,\ java.util.ArrayList,\ double[][])
comment4.text=\ Breadth\ First\ Search\ Algorithm\ implementation\r\n\ Returns\ a\ list\ with\ the\ visited\ nodes\r\n
comment5.params=size\ vertex\ edges
comment5.target=java.util.ArrayList\ componentsFinder(int,\ java.util.ArrayList,\ double[][])
comment5.text=\ \r\n\ Returns\ a\ list\ with\ the\ inital\ nodes\ for\ each\ subgraph\ in\ the\ current\ town\r\n
comment6.params=
comment6.target=void\ findDeadEnds()
comment7.params=father\ node
comment7.target=void\ dfs(int,\ int)
comment8.params=
comment8.target=java.lang.String[]\ solution()
numComments=9
